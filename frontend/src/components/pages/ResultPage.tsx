import React from "react";
import clsx from "clsx";
import ErrorPage from "./ErrorPage";
import makeStyles from "@material-ui/core/styles/makeStyles";
import ImageResultsTable from "../tables/ImageResultsTable";
import AttackEvaluationTable from "../tables/AttackEvaluationTable";
import AttackInformationTable from "../tables/AttackInformationTable";
import GeneralInformationTable from "../tables/GeneralInformationTable";
import AppBarWithBackButton from "../AppBarWithBackButton";
import { ServerResponse, IndexRouteLocationState } from "../../utils/types";
import { DATASET, DATASET_OBJ } from "../../utils/data";
import { useHistory } from "react-router-dom";

interface Props {
  serverResponse: ServerResponse | null;
}

const useStyles = makeStyles({
  container: {
    padding: "32px 44px",
    backgroundColor: "#fafafa",
    marginTop: -14,
    marginBottom: -14,
  },
  columnFlex: {
    display: "flex",
    flexDirection: "column",
    flex: 1,
  },
  item: {
    marginTop: 14,
    marginBottom: 14,
  },
  attackTablesContainer: {
    display: "flex",
    flex: 1,
  },
  emptyContainer: {
    flex: 0.3,
  },
});

const ResultPage: React.FC<Props> = ({ serverResponse }) => {
  const {
    container,
    item,
    columnFlex,
    attackTablesContainer,
    emptyContainer,
  } = useStyles();
  const history = useHistory<IndexRouteLocationState>();

  if (serverResponse == null || !serverResponse.success) {
    return <ErrorPage />;
  }

  const { evaluation, images, user_input } = serverResponse;
  // const {Model, Attack, Dataset, Label, } = user_input;
  // Get these values from raw user_input or the evaluation CSV generated by the server
  const labels = DATASET_OBJ[evaluation.dataset_name as DATASET].labels;
  const originalImageLabel = labels[evaluation.original_label_index];
  const adversarialImageLabels = evaluation.prediction_after_attack.map(
    (prediction) => labels[prediction]
  );
  const model = user_input.Model;

  return (
    <div className={columnFlex}>
      <AppBarWithBackButton
        onClick={() => void history.push("/", user_input)}
      />
      <div className={clsx(container, columnFlex)}>
        <GeneralInformationTable
          className={item}
          dataset={evaluation.dataset_name}
          model={model}
          labelAttacked={originalImageLabel}
          numberAttacked={evaluation.number_of_images}
          randomSelection={evaluation.random}
        />
        <div className={clsx(attackTablesContainer, item)}>
          <AttackInformationTable user_input={user_input} />
          <div className={emptyContainer} />
          <AttackEvaluationTable {...evaluation} />
        </div>
        <ImageResultsTable
          className={item}
          images={images}
          originalImageLabel={originalImageLabel}
          adversarialImageLabels={adversarialImageLabels}
          confidenceScores={evaluation.confidence_scores}
        />
      </div>
    </div>
  );
};

export default ResultPage;
